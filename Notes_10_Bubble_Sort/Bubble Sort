 Bubble sort:- stable sorting algorithm, comparison sort , compare adjust element
(Sinking Sort or exchange sort)

    3, 1, 5, 2

Iteration 1:-
    --> 3 > 1 => swap them
        1, 3, 5, 2

    --> 3 > 5 => no swap
        1, 3, 5, 2

    --> 5 > 2 => swap them
        1, 3, 2, 5

Iteration 2:-
    --> 1 > 3 => no swap
        1, 3, 2, 5

    --> 3 > 2 => swap them
        1, 2, 3, 5

    --> 3 > 5 => no swap
        1, 2, 3, 5
-------------------------------------------------

Arrays = [1, 3, 4, 2, 5]

Iteration1:- [1, 3, 2, 4, 5]  2nd largest element at second last

Iteration2:- [1, 2, 3, 4, 5]  3rd largest element at third last

Also, known as Sinking Sort.

-------------------------------------------------
n = length of Arrays

for(int i = 0; i < n; i++){
    
    for(int j = 0; j < n - 1 - i; j++){ // as after each pass from backend i+1 no. of elements are sorted
        
        if(array[j] > array[j+1]){  // comapre adjust element
            int temp = array[j];
            array[j] = array[j+1];
            array[j+1] = temp;
        }
    
    }
}
-------------------------------------------------
Space complexity :- O(1) // no extra space reuired 
                         // like create new array no required

Time complexity:- Best Case:- O(N) => actual array is sorted array 
                  worst case:- O(N*N) => acutal array sorted in decesding order wants to sort in acesding order

    as size of array growing no. of comparisions also increases.

----------------------------------------------------
Best case:-

for(int i = 0; i < n; i++){
    boolean flag = true;
    for(int j = 0; j < n - 1 - i; j++){ // as after each pass from backend i+1 no. of elements are sorted
        
        if(array[j] > array[j+1]){  // comapre adjust element
            int temp = array[j];
            array[j] = array[j+1];
            array[j+1] = temp;

            flag = false;
        }
    }

    if(flag == true){
        break;
    }
}

array = [1, 2, 3, 4, 5]

for any value  no swaps, then we can end program ::- this means that loop only run for N-1 times
::- Best case time complexity is O(N) 

----------------------------------------------------

Its stable sorting algorithm. means:-
    Original Array:- '10' '20' 20 '30' 10               ::('num' == num) => both are equal, '' are just for denotion
        After sort:- '10' 10 '20' 20 30

In original array '10' is before 10, after sorting also '10' is before 10 ::- Stable algorithm

if algorithm give us like:- 
    Original Array:- '10' '20' 20 '30' 10               ::('num' == num) => both are equal, '' are just for denotion
        After sort:-  10 '10' '20' 20 30

In original array '10' is before 10, after sorting also 10 is before '10' ::- Unstable algorithm
